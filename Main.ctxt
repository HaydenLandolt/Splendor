#BlueJ class context
comment0.target=Main
comment1.params=stage
comment1.target=void\ start(javafx.stage.Stage)
comment1.text=\r\n\ Initializes\ and\ shows\ the\ main\ stage\r\n
comment10.params=event
comment10.target=void\ handle(javafx.scene.input.MouseEvent)
comment11.params=event
comment11.target=void\ handle(javafx.scene.input.MouseEvent)
comment12.params=event
comment12.target=void\ handle(javafx.scene.input.MouseEvent)
comment13.params=event
comment13.target=void\ handle(javafx.scene.input.MouseEvent)
comment14.params=event
comment14.target=void\ handle(javafx.scene.input.MouseEvent)
comment15.params=event
comment15.target=void\ handle(javafx.scene.input.MouseEvent)
comment16.params=event
comment16.target=void\ handle(javafx.scene.input.MouseEvent)
comment17.params=event
comment17.target=void\ handle(javafx.scene.input.MouseEvent)
comment18.params=event
comment18.target=void\ handle(javafx.scene.input.MouseEvent)
comment19.params=event
comment19.target=void\ handle(javafx.scene.input.MouseEvent)
comment2.params=event
comment2.target=void\ handle(javafx.scene.input.MouseEvent)
comment20.params=event
comment20.target=void\ handle(javafx.scene.input.MouseEvent)
comment21.params=event
comment21.target=void\ handle(javafx.scene.input.MouseEvent)
comment22.params=event
comment22.target=void\ handle(javafx.scene.input.MouseEvent)
comment23.params=event
comment23.target=void\ handle(javafx.scene.input.MouseEvent)
comment24.params=event
comment24.target=void\ handle(javafx.scene.input.MouseEvent)
comment25.params=args
comment25.target=void\ main(java.lang.String[])
comment25.text=\r\n\ Main\ method\ for\ the\ program\r\n\ \r\n\ @param\ args\ -\ arguments\r\n
comment26.params=card
comment26.target=int\ purchaseCard(Card)
comment26.text=\r\n\ Takes\ a\ card\ from\ the\ market\ and\ ensures\ the\ player\ has\ the\ correct\r\n\ number\ of\ gems\ avaiable\ for\ market\ and\ bonuses.\r\n\ \r\n\ @param\ -\ the\ card\ being\ purchased\r\n\ @return\ 1\ if\ the\ card\ can\ be\ purchased,\ 0\ if\ it\ cannot.\r\n
comment27.params=noble
comment27.target=int\ purchaseNoble(Noble)
comment27.text=\r\n\ Takes\ a\ noble\ from\ the\ market\ and\ adds\ it\ to\ the\ player\r\n\ \r\n\ @param\ noble\ -\ the\ noble\ being\ purchased\r\n\ @return\ 1\ if\ the\ noble\ can\ be\ purchased,\ 0\ if\ it\ cannot\r\n
comment28.params=
comment28.target=void\ updateGemVisuals()
comment28.text=\r\n\ Updates\ the\ visuals\ to\ reflect\ the\ new\ victory\ points\ and\r\n\ bonuses\ of\ the\ player.\r\n
comment29.params=marketDisplay\ index\ card\ cardVisuals\ deck\ marketView
comment29.target=void\ addMarketCardFunction(javafx.scene.layout.HBox,\ int,\ Card,\ javafx.scene.Group,\ java.util.Stack,\ Card[])
comment29.text=\r\n\ Adds\ functionality\ to\ the\ cards\ in\ the\ market.\r\n\ \r\n\ @param\ marketDisplay\ -\ the\ display\ HBox\ for\ the\ appropriate\ market\ level\r\n\ @param\ index\ -\ the\ index\ of\ the\ card\r\n\ @param\ card\ -\ the\ card\ to\ which\ functionality\ is\ being\ added\r\n\ @param\ cardVisuals\ -\ the\ visuals\ to\ be\ interacted\ with\r\n\ @param\ deck\ -\ the\ appropriate\ deck\ from\ which\ a\ replacement\ card\ is\ to\ be\ drawn\r\n\ @param\ marketView\ -\ the\ array\ of\ cards\ that\ are\ available\ in\ the\ appropriate\ level\r\n
comment3.params=event
comment3.target=void\ handle(javafx.scene.input.MouseEvent)
comment30.params=event
comment30.target=void\ handle(javafx.scene.input.MouseEvent)
comment31.params=card
comment31.target=java.util.ArrayList\ returnGems(Card)
comment31.text=\r\n\ Returns\ gems\ to\ the\ user\ after\ a\ purchase.\r\n\ \r\n\ @param\ card\ -\ the\ card\ being\ purchased\r\n\ @return\ an\ list\ of\ the\ unused\ gems\r\n
comment32.params=cardVisuals\ card\ cardsInHand\ index
comment32.target=void\ addCardInHandFunction(javafx.scene.Group,\ Card,\ javafx.scene.layout.HBox,\ int)
comment32.text=\r\n\ Adds\ functionality\ to\ the\ card\ in\ a\ player's\ hand\r\n\ \r\n\ @param\ cardVisuals\ -\ the\ visuals\ of\ the\ card\r\n\ @param\ card\ -\ the\ card\ to\ which\ functionality\ is\ being\ added\r\n\ @param\ cardsInHand\ -\ the\ display\ of\ the\ cards\ in\ the\ player's\ hand\r\n\ @param\ index\ -\ the\ index\ of\ the\ card\ within\ the\ player\ hand\r\n
comment33.params=event
comment33.target=void\ handle(javafx.scene.input.MouseEvent)
comment34.params=
comment34.target=void\ nextTurn()
comment34.text=\r\n\ Starts\ the\ next\ turn\r\n
comment35.params=
comment35.target=java.lang.String\ checkIfWinner()
comment35.text=\r\n\ Checks\ if\ there\ is\ a\ winner.\r\n\r\n\ @return\ the\ name\ of\ the\ winner,\ null\ if\ there\ is\ no\ winner\r\n
comment36.params=gem
comment36.target=int\ takeGem(GemType)
comment36.text=\r\n\ Adds\ a\ gem\ to\ the\ player\ and\ removes\ it\ from\ the\ market\r\n\ \r\n\ @param\ gem\ -\ the\ type\ of\ gem\ being\ taken\r\n\ @return\ 0\ if\ taking\ the\ gem\ is\ unsuccessful,\ 1\ if\ taking\ the\ gem\ does\ not\ end\ the\ turn,\ and\ 2\ if\ it\ does\r\n
comment37.params=name
comment37.target=void\ winner(java.lang.String)
comment37.text=\r\n\ Changes\ the\ scene\ and\ declares\ the\ winner\r\n\ \r\n\ @param\ name\ -\ the\ name\ of\ the\ winner\r\n
comment38.params=player1FieldContent\ player2FieldContent\ player3FieldContent\ player4FieldContent
comment38.target=void\ newGame(java.lang.String,\ java.lang.String,\ java.lang.String,\ java.lang.String)
comment38.text=\r\n\ Reinitializes\ game-specific\ components\ to\ reset\ the\ program\ for\r\n\ a\ new\ game.\r\n\ \r\n\ @param\ player1Name\ -\ the\ name\ of\ player\ 1\r\n\ @param\ player2Name\ -\ the\ name\ of\ player\ 2\r\n\ @param\ player3Name\ -\ the\ name\ of\ player\ 3\r\n\ @param\ player4Name\ -\ the\ name\ of\ player\ 4\r\n
comment39.params=event
comment39.target=void\ handle(javafx.scene.input.MouseEvent)
comment4.params=event
comment4.target=void\ handle(javafx.scene.input.MouseEvent)
comment40.params=event
comment40.target=void\ handle(javafx.scene.input.MouseEvent)
comment41.params=event
comment41.target=void\ handle(javafx.scene.input.MouseEvent)
comment42.params=event
comment42.target=void\ handle(javafx.scene.input.MouseEvent)
comment43.params=localPlayers
comment43.target=void\ enterPlayerNames(int)
comment43.text=\r\n\ Sets\ player\ names\ from\ the\ appropriate\ text\ fields\r\n\ \r\n\ @param\ localPlayers\ -\ the\ number\ of\ players\ on\ the\ client's\ computer\r\n
comment44.params=
comment44.target=void\ resetInstructions()
comment45.params=
comment45.target=void\ openSoundControls()
comment46.params=event
comment46.target=void\ handle(javafx.scene.input.MouseEvent)
comment47.params=observable
comment47.target=void\ invalidated(javafx.beans.Observable)
comment48.params=event
comment48.target=void\ handle(javafx.scene.input.MouseEvent)
comment49.params=observable
comment49.target=void\ invalidated(javafx.beans.Observable)
comment5.params=event
comment5.target=void\ handle(javafx.scene.input.MouseEvent)
comment50.params=personality
comment50.target=void\ doAITurn(int)
comment51.params=
comment51.target=void\ aiProtocol1()
comment52.params=
comment52.target=void\ aiProtocol2()
comment53.params=
comment53.target=void\ aiProtocol3()
comment54.params=
comment54.target=int\ takeRandomGem()
comment55.params=deck\ marketDisplay\ index\ marketView
comment55.target=void\ aiReserveCard(java.util.Stack,\ javafx.scene.layout.HBox,\ int,\ Card[])
comment6.params=event
comment6.target=void\ handle(javafx.scene.input.MouseEvent)
comment7.params=event
comment7.target=void\ handle(javafx.scene.input.MouseEvent)
comment8.params=event
comment8.target=void\ handle(javafx.scene.input.MouseEvent)
comment9.params=event
comment9.target=void\ handle(javafx.scene.input.MouseEvent)
numComments=56
