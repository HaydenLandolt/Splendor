#BlueJ class context
comment0.target=Player
comment1.params=id\ name\ isAI
comment1.target=Player(int,\ java.lang.String,\ boolean)
comment1.text=\r\n\ Constructor\ for\ a\ Player.\r\n\ \r\n\ @param\ id\ -\ the\ player's\ id,\ also\ serves\ as\ the\ player's\ index\ within\ the\ main\ class\r\n\ @param\ name\ -\ player\ name.\r\n
comment10.params=
comment10.target=java.lang.String\ getName()
comment10.text=\r\n\ Getter\ for\ the\ player's\ name;\r\n\ \r\n\ @return\ the\ player's\ name\r\n
comment11.params=
comment11.target=javafx.scene.Group\ getVisuals()
comment11.text=\r\n\ Getter\ for\ the\ player's\ visuals.\r\n\ \r\n\ @return\ the\ player's\ visuals\r\n
comment12.params=
comment12.target=java.util.ArrayList\ getGemsForMarket()
comment12.text=\r\n\ Getter\ for\ the\ ArrayList\ of\ gems\ available\ to\ spend\ in\ the\ market.\r\n\ \r\n\ @return\ gemsForMarket\r\n
comment13.params=
comment13.target=int\ getDiamondCards()
comment13.text=\r\n\ Getter\ for\ the\ player's\ diamond\ bonuses.\r\n\ \r\n\ @return\ the\ player's\ diamond\ bonuses\r\n
comment14.params=
comment14.target=int\ getSapphireCards()
comment14.text=\r\n\ Getter\ for\ the\ player's\ sapphire\ bonuses.\r\n\ \r\n\ @return\ the\ player's\ sapphire\ bonuses\r\n
comment15.params=
comment15.target=int\ getEmeraldCards()
comment15.text=\r\n\ Getter\ for\ the\ player's\ emerald\ bonuses.\r\n\ \r\n\ @return\ the\ player's\ emerald\ bonuses\r\n
comment16.params=
comment16.target=int\ getRubyCards()
comment16.text=\r\n\ Getter\ for\ the\ player's\ ruby\ bonuses.\r\n\ \r\n\ @return\ the\ player's\ ruby\ bonuses\r\n
comment17.params=
comment17.target=int\ getOnyxCards()
comment17.text=\r\n\ Getter\ for\ the\ player's\ onyx\ bonuses.\r\n\ \r\n\ @return\ the\ player's\ onyx\ bonuses\r\n
comment18.params=
comment18.target=int\ getVP()
comment18.text=\r\n\ Getter\ for\ the\ player's\ victory\ points.\r\n\ \r\n\ @return\ the\ player's\ victory\ points\r\n
comment19.params=
comment19.target=boolean\ getIsAI()
comment19.text=\r\n\ Getter\ for\ the\ player's\ isAI\ boolean\r\n\ \r\n\ @return\ true\ if\ the\ player\ is\ AI\r\n
comment2.params=event
comment2.target=void\ handle(javafx.scene.input.MouseEvent)
comment20.params=
comment20.target=int\ getTotalDevCards()
comment20.text=\r\n\ Getter\ for\ the\ player's\ total\ development\ card,\ used\ for\r\n\ breaking\ ties\ when\ determining\ a\ winner.\r\n\ \r\n\ @return\ the\ player's\ total\ development\ cards\r\n
comment21.params=
comment21.target=int\ getTotalGems()
comment21.text=\r\n\ Getter\ for\ the\ player's\ total\ gems.\ Used\ to\ while\ adding\ gems\r\n\ to\ the\ inventory.\r\n\ \r\n\ @return\ the\ player's\ total\ development\ cards\r\n
comment22.params=
comment22.target=void\ setActivePlayer()
comment22.text=\r\n\ Sets\ the\ colour\ of\ the\ player's\ border\ to\ yellow\ to\ indicate\r\n\ they\ are\ the\ active\ player.\ The\ method\ will\ also\ trigger\ the\r\n\ AI\ turn\ in\ a\ single\ player\ game.\r\n
comment23.params=
comment23.target=void\ setUnactivePlayer()
comment23.text=\r\n\ Sets\ the\ colour\ of\ the\ player's\ border\ back\ to\ grey\ to\ indicate\r\n\ they\ are\ no\ longer\ the\ active\ player.\r\n
comment24.params=
comment24.target=javafx.scene.layout.HBox\ getCardsInHand()
comment24.text=\r\n\ Getter\ for\ the\ visual\ display\ of\ a\ players\ hand,\r\n\ \r\n\ @return\ the\ player's\ hand\ HBox\r\n
comment25.params=unusedGems
comment25.target=void\ spendGems(java.util.ArrayList)
comment25.text=\r\n\ Runs\ through\ the\ ArrayList\ of\ gems\ being\ used\ for\ purchases\r\n\ and\ returns\ any\ unsused\ gems\ to\ the\ player's\ inventory.\r\n\ \r\n\ @param\ unsuedGems\ -\ a\ list\ of\ unused\ gems\r\n
comment26.params=
comment26.target=void\ updateStatVisuals()
comment26.text=\r\n\ Updates\ the\ visuals\ to\ reflect\ the\ player's\ bonuses\ and\r\n\ victory\ points.\r\n
comment27.params=index
comment27.target=void\ removeCardFromHand(int)
comment27.text=\r\n\ Removes\ a\ card\ from\ the\ player's\ hand.\r\n\ \r\n\ @param\ index\ -\ the\ index\ of\ the\ card\ being\ removed\r\n
comment28.params=
comment28.target=boolean\ isHandFull()
comment28.text=\r\n\ Determines\ if\ the\ player's\ hand\ is\ full\r\n\ \r\n\ @return\ true\ if\ the\ player's\ hand\ is\ full\r\n
comment29.params=
comment29.target=void\ addAllGemsForMarket()
comment29.text=\r\n\ \ In\ the\ case\ of\ an\ AI,\ where\ the\ computer\ is\ not\ programmed\ to\ think\ strategically\ about\ what\ to\ buy,\r\n\ \ the\ AI\ sends\ all\ of\ its\ gems\ to\ market,\ buys\ what\ it\ can,\ and\ is\ usually\ left\ with\ a\ lot\ of\ change.\r\n
comment3.params=card
comment3.target=int\ addCardToHand(Card)
comment3.text=\r\n\ Adds\ a\ card\ to\ the\ player's\ hand.\r\n\ \r\n\ @param\ card\ -\ the\ card\ being\ added\ to\ the\ hand\r\n\ @return\ -\ returns\ 1\ if\ the\ card\ was\ successfully\ added,\ 0\ if\ it\ was\ not\r\n
comment30.params=
comment30.target=void\ enableCheat()
comment30.text=\r\n\ When\ a\ player\ enters\ their\ name\ as\ "Hodgson",\ the\ cheat\ is\ activiated\ giving\ them\ enough\r\n\ bonuses\ to\ buy\ any\ card\ for\ free.\r\n
comment4.params=gem
comment4.target=void\ addGem(GemType)
comment4.text=\r\n\ Adds\ a\ gem\ to\ the\ players'\ inventory.\r\n\ \r\n\ @param\ gem\ -\ the\ type\ of\ gem\ being\ added\r\n
comment5.params=event
comment5.target=void\ handle(javafx.scene.input.MouseEvent)
comment6.params=noble
comment6.target=void\ addNoble(Noble)
comment6.text=\r\n\ Adds\ a\ noble\ from\ the\ market.\r\n\ \r\n\ @param\ -\ the\ noble\ being\ added\r\n
comment7.params=card
comment7.target=void\ addCard(Card)
comment7.text=\r\n\ Applies\ the\ bonuses\ of\ a\ card\ to\ the\ player.\r\n\ \r\n\ @param\ card\ -\ the\ card\ purchased\ from\ the\ market\r\n
comment8.params=
comment8.target=boolean\ getHasNoble()
comment8.text=\r\n\ Getter\ for\ the\ hasNoble\ boolean.\r\n\ \r\n\ @return\ hasNoble\r\n
comment9.params=
comment9.target=Card[]\ getHand()
comment9.text=\r\n\ Getter\ for\ the\ player's\ hand.\r\n\ \r\n\ @return\ the\ players\ hand\ as\ a\ Card[]\r\n
numComments=31
